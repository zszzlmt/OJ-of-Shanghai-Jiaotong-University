如果有明显的高效算法，永远不要抱有侥幸心理退而求其次
多段代码功能相似进行复制粘贴时，一定要检查每一段的特殊改动是否做好
每一个循环检查变量的初始化是否做好，尤其大循环
做单步一定要最后做一组连续单步，确保没有初始化bug
不要因为想到所谓的高效算法而沾沾自喜，很有可能有更naive且不复杂的高效算法，想每一个算法后要观察能否化简
有时，在最后打一个大补丁能解决的问题（如一个O(n)循环），永远不要试着顺着思路在各个旮旯打小补丁，哪怕小补丁更高效
类似于进位计算的问题，要考虑两个n大小数据产生n+1大小数据的情况
就连斐波那契都有O(log(N))的算法，你为何想当然的认为没有更高效的算法？
不要思维定式。如分解质因数，根本没必要每次判断是不是质数，直接循环除就好，即前面的分支导致后面绝不可能发生
向上向下取整操作，一定要考虑边界的1，2
烧死if-else全家，只用switch
要善于使用求余操作化简超大数据规模下的问题规模
把出题人当成智障，总是使用给的数据规模再大一点的空间
